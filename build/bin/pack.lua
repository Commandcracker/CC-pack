local function a(b)if b==nil then else if term.isColor()then term.setTextColour(colors.orange)end;term.write(b.."? [")if term.isColor()then term.setTextColour(colors.lime)end;term.write('Y')if term.isColor()then term.setTextColour(colors.orange)end;term.write('/')if term.isColor()then term.setTextColour(colors.red)end;term.write('n')if term.isColor()then term.setTextColour(colors.orange)end;term.write("] ")term.setTextColour(colors.white)end;local c=string.lower(string.sub(read(),1,1))if c=='y'or c=='j'or c==''then return true else return false end end;local pack=nil or pack;if not pack then pack=dofile("/"..fs.getDir(shell.getRunningProgram()).."/../".."lib/pack")end;pack.fixSources(true)local function d()for e,f in pairs(pack.getPackages())do for g,h in pairs(f)do print(e.."/"..g)end end end;local function i(j)if not j[2]then printError("Usage: show <package>")return end;for e,f in pairs(pack.getPackages())do for g,k in pairs(f)do if g==j[2]then print("Package:",g)print("Url:",k["url"])print("Installed:",pack.isPackageInstalled(e.."/"..g))return end end end;printError("Package not found")end;local function l(j)if not j[2]then printError("Usage: search <package>")return end;local m=false;for e,f in pairs(pack.getPackages())do for g,h in pairs(f)do if string.match(g,j[2])then print(e.."/"..g)m=true end end end;if not m then printError("No matching packages found")end end;local function n(j)if not j[2]then printError("Usage: install <package>")return end;for e,f in pairs(pack.getPackages())do for g,k in pairs(f)do if g==j[2]then if pack.isPackageInstalled(e.."/"..g)then printError("Package already installed")return end;if a("install "..e.."/"..g)then pack.installPackage(e.."/"..g,k,shell)end;return end end end;printError("Package not found")end;local function o(j)if not j[2]then printError("Usage: remove <package>")return end;for e,f in pairs(pack.getPackages())do for g,k in pairs(f)do if g==j[2]then if not pack.isPackageInstalled(e.."/"..g)then printError("Package not installed")return end;if a("remove "..e.."/"..g)then pack.removePackage(e.."/"..g)end;return end end end;printError("Package not found")end;local function p(j)if not j[3]then printError("Usage: add-source <name> <url>")return end;pack.addSource(j[2],j[3],true)end;local function q()pack.fetchSources(true)end;local r={{"install","install packages",n},{"show","show package details",i},{"search","search in package descriptions",l},{"remove","remove packages",o},{"list","list packages based on package names",d},{"fetch","updats the sources",q},{"add-source","add asorce to the sources file",p}}local function s()print("commands:")for h,t in pairs(r)do print("  "..t[1].." - "..t[2])end end;local j={...}if#j<=0 then print("Usage: pack <command>")s()return end;for h,t in pairs(r)do if j[1]==t[1]then t[3](j)return end end;printError("Command not found!")s()