local function a(b)if b==nil then else if term.isColor()then term.setTextColour(colors.orange)end;term.write(b.."? [")if term.isColor()then term.setTextColour(colors.lime)end;term.write('Y')if term.isColor()then term.setTextColour(colors.orange)end;term.write('/')if term.isColor()then term.setTextColour(colors.red)end;term.write('n')if term.isColor()then term.setTextColour(colors.orange)end;term.write("] ")term.setTextColour(colors.white)end;local c=string.lower(string.sub(read(),1,1))if c=='y'or c=='j'or c==''then return true else return false end end;if not pack then local pack=dofile(fs.getDir(shell.getRunningProgram()).."/".."lib/pack")end;pack.fixSources(true)local function d()for e,f in pairs(pack.getPackages())do for g,h in pairs(f)do print(e.."/"..g)end end end;local function i(j)if not j[2]then printError("Usage: show <package>")return end;for e,f in pairs(pack.getPackages())do for g,k in pairs(f)do if g==j[2]then print("Package:",g)print("Url:",k["url"])print("Installed:",pack.isPackageInstalled(e.."/"..g))return end end end;printError("Package not found")end;local function l(j)if not j[2]then printError("Usage: search <package>")return end;local m=false;for e,f in pairs(pack.getPackages())do for g,h in pairs(f)do if string.match(g,j[2])then print(e.."/"..g)m=true end end end;if not m then printError("No matching packages found")end end;local function n(j)if not j[2]then printError("Usage: install <package>")return end;for e,f in pairs(pack.getPackages())do for g,k in pairs(f)do if g==j[2]then if pack.isPackageInstalled(e.."/"..g)then printError("Package already installed")return end;if a("install "..e.."/"..g)then pack.installPackage(e.."/"..g,k)end;return end end end;printError("Package not found")end;local function o(j)if not j[2]then printError("Usage: remove <package>")return end;for e,f in pairs(pack.getPackages())do for g,k in pairs(f)do if g==j[2]then if not pack.isPackageInstalled(e.."/"..g)then printError("Package not installed")return end;if a("remove "..e.."/"..g)then pack.removePackage(e.."/"..g)end;return end end end;printError("Package not found")end;local function p(j)if not j[3]then printError("Usage: add-source <name> <url>")return end;if not http.checkURL(j[3])then printError("Bad url")return end;local q=fs.open(sources_list_path,"a")q.write("\n"..j[2].." "..j[3])q.close()print("Added:",j[2],j[3])pack.fetchSources(true)end;local function r()pack.fetchSources(true)end;local s={{"install","install packages",n},{"show","show package details",i},{"search","search in package descriptions",l},{"remove","remove packages",o},{"list","list packages based on package names",d},{"fetch","updats the sources",r},{"add-source","add asorce to the sources file",p}}local function t()print("commands:")for h,u in pairs(s)do print("  "..u[1].." - "..u[2])end end;local j={...}if#j<=0 then print("Usage: pack <command>")t()return end;for h,u in pairs(s)do if j[1]==u[1]then u[3](j)return end end;printError("Command not found!")t()